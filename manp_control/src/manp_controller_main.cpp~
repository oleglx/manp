#include<cstdio>
#include<ctime>

#include<ros/ros.h>
#include<std_msgs/Float64.h>
//#include<std_msgs/String.h>

/* 

// !!!! TODO: check thread safety, improve
robot_state st = {0,0,0,0,0,0,true};

// data for lines callback
ros::Time lines_last_time; 
bool line_data_new;
uint32_t p1x;
uint32_t p1y;
uint32_t p2x;
uint32_t p2y;

// data for control signals callback
ros::Time control_last_time; 
bool control_data_new;
char direction;

void lines_callback(const poly_detector::VectorOfLines::ConstPtr& inp_msg){
  double signal_lw = 0.0, signal_rw = 0.0; // values to send
  if(inp_msg->len>0){
    // read 1st line in the message
    assert(inp_msg->x.size()>=2); // sanity checks
    assert(inp_msg->y.size()==inp_msg->x.size());
    p1x = inp_msg->x[0];
    p2x = inp_msg->x[1];
    p1y = inp_msg->y[0];
    p2y = inp_msg->y[1];
    lines_last_time = ros::Time::now();
    line_data_new = true;
  }
}

void manual_direction_callback(const std_msgs::String::ConstPtr& inp_msg){
  if(inp_msg->data.length()>0){
    direction = tolower(inp_msg->data[0]);
    if(direction!='w' && direction!='a' && direction!='s' && direction!='d'){
      direction = 'n';
    }
    control_last_time = ros::Time::now();
    control_data_new = true;
  }
}

void timer_callback(const ros::TimerEvent &te){
  if(!st.reinitialize_flag && (te.current_real > lines_last_time + ros::Duration(2))){
    st.reinitialize_flag = true;
  }
}

*/

int main(int argc, char **argv){
  ros::Publisher wtb_pub, l1tl2_pub, l2tl3_pub;
/*
  camera_geometry g_ldtester;
  // initialize global variables
  init_global_geometric_constants_ldtester(g_ldtester);
  line_data_new = control_data_new = false;
*/
  // initialize node
  ros::init(argc, argv, "manp_controller");
  // initialize publishing to the topic /poly_detector/lines
  ros::NodeHandle n;
  wtb_pub = n.advertise<std_msgs::Float64>("/manp/world_to_base_state_controller/command", 50);
  l1tl2_pub = n.advertise<std_msgs::Float64>("/manp/link1_to_link2_state_controller/command", 50);
  l2tl3_pub = n.advertise<std_msgs::Float64>("/manp/link2_to_link3_state_controller/command", 50);
/*
  // timer to process command times
  ros::Timer timer = n.createTimer(ros::Duration(0.1), timer_callback);
  // subscribe to the topic with raw images from the camera
  ros::Subscriber sub_lines = n.subscribe("/poly_detector/lines", 50, lines_callback);
  // subscribe to the topic with commands from console
  ros::Subscriber sub_md = n.subscribe("/ldtester_linecontroller/manual_direction", 50, manual_direction_callback);
  // process input data from topics
*/
  ros::Rate r(50); // rate is 50 Hz
  //ros::spinOnce();
  r.sleep();
  while(ros::ok()){
/*
    double signal_lw = 0, signal_rw = 0;
    // line detected; process and send control signals to topic
    if(control_data_new && control_last_time>lines_last_time){
      // control signal detected and last time when a line was detected
      // earlier then 2 seconds ago
      move_by_manual_commands(direction, signal_lw, signal_rw);
      control_data_new = false;
    }else if(line_data_new && control_last_time + ros::Duration(1)<ros::Time::now()){
      // 1. calculate coordinates of endpoints
      p3d p1proj, p2proj;
      calculate_point_projection_on_floor(g_ldtester, p1x, p1y, p1proj);
      calculate_point_projection_on_floor(g_ldtester, p2x, p2y, p2proj);
      // 2. calculate signals to the model motors
      update_state_by_line(p1proj,p2proj,st);
      get_control_signals(st, signal_lw, signal_rw);
      line_data_new = false;
      printf("%f %f\n", st.dist, st.orient*180.0/M_PI);
    }
*/
    // send signals to the model motors
    std_msgs::Float64 out_msg;
    out_msg.data = 100;
    wtb_pub.publish(out_msg);
    out_msg.data = 0.0;
    l1tl2_pub.publish(out_msg);
    out_msg.data = 0.0;
    l2tl3_pub.publish(out_msg);
    // wait next message
    //ros::spinOnce(); 
    r.sleep();
  }
  return 0;
}
